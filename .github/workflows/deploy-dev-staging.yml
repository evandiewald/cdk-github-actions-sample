name: Build and Deploy
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  synth:
    name: Synthesize
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: v18.15.0
      - name: Authenticate Via OIDC Role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          role-to-assume: ${{ secrets.ACTIONS_ROLE_ARN }}
      - name: cdk synth
        run: |-
          npm ci
          npm run build
          npm run build:ci
          npm run cdk synth -- -c developmentAccountId=${{ secrets.AWS_ACCOUNT_ID_DEVELOPMENT }} -c stagingAccountId=${{ secrets.AWS_ACCOUNT_ID_STAGING }}  -c productionAccountId=${{ secrets.AWS_ACCOUNT_ID_STAGING }}
      - name: Upload cdk.out
        uses: actions/upload-artifact@v3
        with:
          name: cdk.out
          path: cdk.out

  deploy:
    name: Deploy
    needs: [synth]
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Download cdk.out
        uses: actions/download-artifact@v3
        with:
          name: cdk.out
          path: cdk.out
      - uses: actions/setup-node@v3
        with:
          node-version: v18.15.0
      - name: Authenticate Via OIDC Role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          role-to-assume: ${{ secrets.ACTIONS_ROLE_ARN }}
      - name: Deploy - Dev
        run: |-
          npm install -g aws-cdk
          npx cdk deploy --app "./cdk.out/assembly-Dev" --never-approve
      - name: Deploy - Staging
        run: |-
          npx cdk deploy --app 'cdk.out/assembly-Staging' --never-approve

  create-release:
    name: Create production release
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: read
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: cdk.out
          path: cdk.out
      # we can't attach a folder to a release
      - name: Zip Artifact
        run: |
          zip -r cdk.out.zip cdk.out
      - name: Get PR Number
        id: pr
        run: echo "::set-output name=pull_request_number::$(gh pr view --json number -q .number || echo "")"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Draft Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.pr.outputs.pull_request_number }}
          name: Release ${{ steps.pr.outputs.pull_request_number }}
          body: |
            ## Info
            Commit ${{ github.sha }} was deployed to `staging`. [See code diff](${{ github.event.compare }}).
            
            It was initialized by [${{ github.event.sender.login }}](${{ github.event.sender.html_url }}).
            
            ## How to Promote?
            In order to promote this to prod, edit the draft and press **"Publish release"**.
          draft: true
          files: cdk.out.zip
